version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-ecr: circleci/aws-ecr@2.0
  aws-ecs: circleci/aws-ecs@2.0
jobs:
  run_tests:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run:
          name: Install npm dependencies
          command: |
            npm install --save
      - run:
          name: Run Unit Tests
          command: |
            npm run test 
      - store_test_results:
          path: mochawesome-report
  # build_docker_image:
  #   docker:
  #     - image: circleci/node:12
  #   steps:
  #     - checkout
  #     - aws-cli/install
  #     - setup_remote_docker:
  #         docker_layer_caching: false
  #     - run:
  #         name: Build Docker image
  #         command: |
  #           export TAG=0.2.<< pipeline.number >>
  #           export IMAGE_NAME=$CIRCLE_PROJECT_REPONAME
  #           docker build -t $DOCKER_LOGIN/$IMAGE_NAME -t $DOCKER_LOGIN/$IMAGE_NAME:$TAG .
  #           echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
  #           docker push $DOCKER_LOGIN/$IMAGE_NAME
  build_docker_image:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID 
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - setup_remote_docker:
          docker_layer_caching: false
      # - run:
      #     name: Build Docker image
      #     command: |
      #       aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 902513218701.dkr.ecr.us-east-1.amazonaws.com
      #       export TAG=0.2.<< pipeline.number >>
      #       export IMAGE_NAME=circleci-demo
      #       docker build -t circleci-demo .
      #       docker tag circleci-demo:latest 902513218701.dkr.ecr.us-east-1.amazonaws.com/circleci-demo:latest
      #       docker push 902513218701.dkr.ecr.us-east-1.amazonaws.com/circleci-demo:latest
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Build image
          command: |
            docker build -t $FULL_IMAGE_NAME .
      - run:
          name: Test image
          command: |
            docker run -d -p 3000:3000 --name built-image $FULL_IMAGE_NAME
            sleep 10
            docker run --network container:built-image appropriate/curl --retry 10 --retry-connrefused http://localhost:3000 | grep "Hello World!"
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECS_CLUSTER_NAME="${AWS_RESOURCE_NAME_PREFIX}-cluster"' >> $BASH_ENV
            echo 'export ECS_SERVICE_NAME="${AWS_RESOURCE_NAME_PREFIX}-service"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Push image
          command: |
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 902513218701.dkr.ecr.us-east-1.amazonaws.com
            docker push $FULL_IMAGE_NAME
      # - aws-ecs/update-service:
      #     family: "${ECS_SERVICE_NAME}"
      #     cluster-name: "${ECS_CLUSTER_NAME}"
      #     container-image-name-updates: "container=${ECS_SERVICE_NAME},image-and-tag=${FULL_IMAGE_NAME}"
      #     container-env-var-updates: "container=${ECS_SERVICE_NAME},name=VERSION_INFO,value=${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM},container=${ECS_SERVICE_NAME},name=BUILD_DATE,value=\"$(date)\""
      #     verify-revision-is-deployed: true
      - aws-ecs/update-service:
          cluster-name: '${AWS_RESOURCE_NAME_PREFIX}-cluster'
          container-image-name-updates: 'container=${AWS_RESOURCE_NAME_PREFIX}-service,tag=${CIRCLE_SHA1}'
          family: '${AWS_RESOURCE_NAME_PREFIX}-service'                          
workflows:
  build_test:
    jobs:
      - run_tests
      - build_docker_image:
          requires:
            - run_tests     
      # - gke_create_cluster
      # - gke_deploy_app:
      #     requires:
      #       - run_tests
      #       - build_docker_image
      #       - gke_create_cluster
      # - smoketest_gke_deployment:
      #     requires:
      #       - gke_deploy_app
      # - approve-destroy:
      #     type: approval
      #     requires:
      #       - gke_create_cluster
      #       - gke_deploy_app
      #       - smoketest_gke_deployment
      # - gke_destroy_cluster:
      #     requires:
       